2025/05/14 19:25:31 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1076774219
    GPU 0: NVIDIA GeForce RTX 4090
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 2.0.0+cu118
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.1+cu118
    OpenCV: 4.11.0
    MMEngine: 0.10.7

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1076774219
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/14 19:25:31 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=256)
data_preprocessor = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    num_classes=5,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
dataset_type = 'ImageNet'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=100, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(enable=False, type='VisualizationHook'))
default_scope = 'mmcls'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
model = dict(
    backbone=dict(
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch',
        type='ResNeSt'),
    head=dict(
        cal_acc=False,
        in_channels=2048,
        loss=dict(
            label_smooth_val=0.1,
            loss_weight=1.0,
            num_classes=5,
            reduction='mean',
            type='LabelSmoothLoss'),
        num_classes=5,
        topk=(
            1,
            5,
        ),
        type='LinearClsHead'),
    neck=dict(type='GlobalAveragePooling'),
    train_cfg=dict(augments=dict(alpha=0.2, type='Mixup')),
    type='ImageClassifier')
optim_wrapper = dict(
    optimizer=dict(lr=0.1, momentum=0.9, type='SGD', weight_decay=0.0001))
param_scheduler = dict(
    by_epoch=True, gamma=0.1, milestones=[
        30,
        60,
        90,
    ], type='MultiStepLR')
randomness = dict(deterministic=False, seed=None)
resume = False
test_cfg = dict()
test_dataloader = dict(
    batch_size=32,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='val.txt',
        data_prefix='val',
        data_root='flower_dataset',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(edge='short', scale=256, type='ResizeEdge'),
            dict(crop_size=224, type='CenterCrop'),
            dict(type='PackClsInputs'),
        ],
        type='ImageNet'),
    num_workers=5,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    topk=(
        1,
        5,
    ), type='Accuracy')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(edge='short', scale=256, type='ResizeEdge'),
    dict(crop_size=224, type='CenterCrop'),
    dict(type='PackClsInputs'),
]
train_cfg = dict(by_epoch=True, max_epochs=100, val_interval=1)
train_dataloader = dict(
    batch_size=32,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='train.txt',
        data_prefix='train',
        data_root='flower_dataset',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(scale=224, type='RandomResizedCrop'),
            dict(direction='horizontal', prob=0.5, type='RandomFlip'),
            dict(type='PackClsInputs'),
        ],
        type='ImageNet'),
    num_workers=5,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(scale=224, type='RandomResizedCrop'),
    dict(direction='horizontal', prob=0.5, type='RandomFlip'),
    dict(type='PackClsInputs'),
]
val_cfg = dict()
val_dataloader = dict(
    batch_size=32,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='val.txt',
        data_prefix='val',
        data_root='flower_dataset',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(edge='short', scale=256, type='ResizeEdge'),
            dict(crop_size=224, type='CenterCrop'),
            dict(type='PackClsInputs'),
        ],
        type='ImageNet'),
    num_workers=5,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    topk=(
        1,
        5,
    ), type='Accuracy')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='ClsVisualizer', vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/myresnet50'

2025/05/14 19:25:32 - mmengine - INFO - Because batch augmentations are enabled, the data preprocessor automatically enables the `to_onehot` option to generate one-hot format labels.
2025/05/14 19:25:32 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/14 19:25:32 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
Name of parameter - Initialization information

backbone.stem.0.conv.weight - torch.Size([32, 3, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stem.0.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stem.0.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stem.1.conv.weight - torch.Size([32, 32, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stem.1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stem.1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stem.2.conv.weight - torch.Size([64, 32, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stem.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stem.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.conv.weight - torch.Size([128, 32, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.conv2.bn0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.bn0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.fc1.weight - torch.Size([32, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.conv2.fc1.bias - torch.Size([32]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.conv2.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.fc2.weight - torch.Size([128, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.conv2.fc2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNeSt  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.conv.weight - torch.Size([128, 32, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.conv2.bn0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.bn0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.fc1.weight - torch.Size([32, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.conv2.fc1.bias - torch.Size([32]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.conv2.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.fc2.weight - torch.Size([128, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.conv2.fc2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNeSt  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.conv.weight - torch.Size([128, 32, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.conv2.bn0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.bn0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.fc1.weight - torch.Size([32, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.conv2.fc1.bias - torch.Size([32]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.conv2.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.fc2.weight - torch.Size([128, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.conv2.fc2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNeSt  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.conv.weight - torch.Size([256, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.conv2.bn0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.bn0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.fc1.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.conv2.fc1.bias - torch.Size([64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.conv2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.fc2.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.conv2.fc2.bias - torch.Size([256]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNeSt  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.conv.weight - torch.Size([256, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.conv2.bn0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.bn0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.fc1.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.conv2.fc1.bias - torch.Size([64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.conv2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.fc2.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.conv2.fc2.bias - torch.Size([256]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNeSt  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.conv.weight - torch.Size([256, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.conv2.bn0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.bn0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.fc1.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.conv2.fc1.bias - torch.Size([64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.conv2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.fc2.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.conv2.fc2.bias - torch.Size([256]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNeSt  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.conv.weight - torch.Size([256, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.conv2.bn0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.bn0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.fc1.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.conv2.fc1.bias - torch.Size([64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.conv2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.fc2.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.conv2.fc2.bias - torch.Size([256]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNeSt  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.conv.weight - torch.Size([512, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.conv2.bn0.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.bn0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.fc1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.conv2.fc1.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.conv2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.fc2.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.conv2.fc2.bias - torch.Size([512]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNeSt  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.conv.weight - torch.Size([512, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.conv2.bn0.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.bn0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.fc1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.conv2.fc1.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.conv2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.fc2.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.conv2.fc2.bias - torch.Size([512]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNeSt  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.conv.weight - torch.Size([512, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.conv2.bn0.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.bn0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.fc1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.conv2.fc1.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.conv2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.fc2.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.conv2.fc2.bias - torch.Size([512]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNeSt  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.conv.weight - torch.Size([512, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.conv2.bn0.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.bn0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.fc1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.conv2.fc1.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.conv2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.fc2.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.conv2.fc2.bias - torch.Size([512]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNeSt  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.conv.weight - torch.Size([512, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.conv2.bn0.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.bn0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.fc1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.conv2.fc1.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.conv2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.fc2.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.conv2.fc2.bias - torch.Size([512]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNeSt  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.conv.weight - torch.Size([512, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.conv2.bn0.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.bn0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.fc1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.conv2.fc1.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.conv2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.fc2.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.conv2.fc2.bias - torch.Size([512]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNeSt  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.conv.weight - torch.Size([1024, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.conv2.bn0.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.bn0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.fc1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.conv2.fc1.bias - torch.Size([256]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.conv2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.fc2.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.conv2.fc2.bias - torch.Size([1024]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNeSt  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.2.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.2.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.conv.weight - torch.Size([1024, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.conv2.bn0.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.bn0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.fc1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.conv2.fc1.bias - torch.Size([256]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.conv2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.fc2.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.conv2.fc2.bias - torch.Size([1024]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNeSt  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.conv.weight - torch.Size([1024, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.conv2.bn0.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.bn0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.fc1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.conv2.fc1.bias - torch.Size([256]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.conv2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.fc2.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.conv2.fc2.bias - torch.Size([1024]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNeSt  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2025/05/14 19:25:33 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/14 19:25:33 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/14 19:25:33 - mmengine - INFO - Checkpoints will be saved to /root/mmclassification/work_dirs/myresnet50.
2025/05/14 19:25:40 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:25:40 - mmengine - INFO - Epoch(train)   [1][72/72]  lr: 1.0000e-01  eta: 0:12:06  time: 0.0915  data_time: 0.0008  memory: 4306  loss: 1.7693
2025/05/14 19:25:40 - mmengine - INFO - Saving checkpoint at 1 epochs
2025/05/14 19:25:42 - mmengine - INFO - Epoch(val) [1][18/18]    accuracy/top1: 34.6154  accuracy/top5: 99.8252  data_time: 0.0102  time: 0.0446
2025/05/14 19:25:48 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:25:48 - mmengine - INFO - Epoch(train)   [2][72/72]  lr: 1.0000e-01  eta: 0:11:01  time: 0.0694  data_time: 0.0010  memory: 4306  loss: 1.3941
2025/05/14 19:25:48 - mmengine - INFO - Saving checkpoint at 2 epochs
2025/05/14 19:25:49 - mmengine - INFO - Epoch(val) [2][18/18]    accuracy/top1: 43.3566  accuracy/top5: 100.0000  data_time: 0.0074  time: 0.0361
2025/05/14 19:25:55 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:25:55 - mmengine - INFO - Epoch(train)   [3][72/72]  lr: 1.0000e-01  eta: 0:10:32  time: 0.0699  data_time: 0.0010  memory: 4306  loss: 1.3965
2025/05/14 19:25:55 - mmengine - INFO - Saving checkpoint at 3 epochs
2025/05/14 19:25:57 - mmengine - INFO - Epoch(val) [3][18/18]    accuracy/top1: 52.9720  accuracy/top5: 100.0000  data_time: 0.0087  time: 0.0348
2025/05/14 19:26:03 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:26:03 - mmengine - INFO - Epoch(train)   [4][72/72]  lr: 1.0000e-01  eta: 0:10:22  time: 0.0702  data_time: 0.0010  memory: 4306  loss: 1.3133
2025/05/14 19:26:03 - mmengine - INFO - Saving checkpoint at 4 epochs
2025/05/14 19:26:04 - mmengine - INFO - Epoch(val) [4][18/18]    accuracy/top1: 57.6923  accuracy/top5: 100.0000  data_time: 0.0075  time: 0.0340
2025/05/14 19:26:10 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:26:10 - mmengine - INFO - Epoch(train)   [5][72/72]  lr: 1.0000e-01  eta: 0:10:04  time: 0.0683  data_time: 0.0008  memory: 4306  loss: 1.3474
2025/05/14 19:26:10 - mmengine - INFO - Saving checkpoint at 5 epochs
2025/05/14 19:26:11 - mmengine - INFO - Epoch(val) [5][18/18]    accuracy/top1: 53.6713  accuracy/top5: 100.0000  data_time: 0.0072  time: 0.0308
2025/05/14 19:26:17 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:26:17 - mmengine - INFO - Epoch(train)   [6][72/72]  lr: 1.0000e-01  eta: 0:09:51  time: 0.0699  data_time: 0.0009  memory: 4306  loss: 1.2782
2025/05/14 19:26:17 - mmengine - INFO - Saving checkpoint at 6 epochs
2025/05/14 19:26:19 - mmengine - INFO - Epoch(val) [6][18/18]    accuracy/top1: 59.9650  accuracy/top5: 100.0000  data_time: 0.0066  time: 0.0332
2025/05/14 19:26:24 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:26:24 - mmengine - INFO - Epoch(train)   [7][72/72]  lr: 1.0000e-01  eta: 0:09:39  time: 0.0719  data_time: 0.0011  memory: 4306  loss: 1.1262
2025/05/14 19:26:24 - mmengine - INFO - Saving checkpoint at 7 epochs
2025/05/14 19:26:26 - mmengine - INFO - Epoch(val) [7][18/18]    accuracy/top1: 60.1399  accuracy/top5: 100.0000  data_time: 0.0074  time: 0.0322
2025/05/14 19:26:31 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:26:31 - mmengine - INFO - Epoch(train)   [8][72/72]  lr: 1.0000e-01  eta: 0:09:29  time: 0.0654  data_time: 0.0007  memory: 4306  loss: 1.2250
2025/05/14 19:26:31 - mmengine - INFO - Saving checkpoint at 8 epochs
2025/05/14 19:26:33 - mmengine - INFO - Epoch(val) [8][18/18]    accuracy/top1: 66.2587  accuracy/top5: 100.0000  data_time: 0.0081  time: 0.0332
2025/05/14 19:26:38 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:26:39 - mmengine - INFO - Epoch(train)   [9][72/72]  lr: 1.0000e-01  eta: 0:09:19  time: 0.0702  data_time: 0.0008  memory: 4306  loss: 1.3076
2025/05/14 19:26:39 - mmengine - INFO - Saving checkpoint at 9 epochs
2025/05/14 19:26:40 - mmengine - INFO - Epoch(val) [9][18/18]    accuracy/top1: 65.7343  accuracy/top5: 100.0000  data_time: 0.0073  time: 0.0314
2025/05/14 19:26:46 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:26:46 - mmengine - INFO - Epoch(train)  [10][72/72]  lr: 1.0000e-01  eta: 0:09:12  time: 0.0683  data_time: 0.0007  memory: 4306  loss: 1.1677
2025/05/14 19:26:46 - mmengine - INFO - Saving checkpoint at 10 epochs
2025/05/14 19:26:47 - mmengine - INFO - Epoch(val) [10][18/18]    accuracy/top1: 64.6853  accuracy/top5: 100.0000  data_time: 0.0070  time: 0.0433
2025/05/14 19:26:53 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:26:53 - mmengine - INFO - Epoch(train)  [11][72/72]  lr: 1.0000e-01  eta: 0:09:06  time: 0.0695  data_time: 0.0009  memory: 4306  loss: 1.1962
2025/05/14 19:26:53 - mmengine - INFO - Saving checkpoint at 11 epochs
2025/05/14 19:26:54 - mmengine - INFO - Epoch(val) [11][18/18]    accuracy/top1: 65.9091  accuracy/top5: 100.0000  data_time: 0.0075  time: 0.0316
2025/05/14 19:27:01 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:27:01 - mmengine - INFO - Epoch(train)  [12][72/72]  lr: 1.0000e-01  eta: 0:09:00  time: 0.0705  data_time: 0.0008  memory: 4306  loss: 1.2094
2025/05/14 19:27:01 - mmengine - INFO - Saving checkpoint at 12 epochs
2025/05/14 19:27:02 - mmengine - INFO - Epoch(val) [12][18/18]    accuracy/top1: 65.9091  accuracy/top5: 100.0000  data_time: 0.0089  time: 0.0325
2025/05/14 19:27:08 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:27:08 - mmengine - INFO - Epoch(train)  [13][72/72]  lr: 1.0000e-01  eta: 0:08:54  time: 0.0742  data_time: 0.0010  memory: 4306  loss: 1.0728
2025/05/14 19:27:08 - mmengine - INFO - Saving checkpoint at 13 epochs
2025/05/14 19:27:10 - mmengine - INFO - Epoch(val) [13][18/18]    accuracy/top1: 67.1329  accuracy/top5: 100.0000  data_time: 0.0079  time: 0.0330
2025/05/14 19:27:15 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:27:16 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:27:16 - mmengine - INFO - Epoch(train)  [14][72/72]  lr: 1.0000e-01  eta: 0:08:49  time: 0.0728  data_time: 0.0010  memory: 4306  loss: 1.1923
2025/05/14 19:27:16 - mmengine - INFO - Saving checkpoint at 14 epochs
2025/05/14 19:27:17 - mmengine - INFO - Epoch(val) [14][18/18]    accuracy/top1: 66.9580  accuracy/top5: 100.0000  data_time: 0.0085  time: 0.0332
2025/05/14 19:27:23 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:27:23 - mmengine - INFO - Epoch(train)  [15][72/72]  lr: 1.0000e-01  eta: 0:08:43  time: 0.0702  data_time: 0.0009  memory: 4306  loss: 1.1475
2025/05/14 19:27:23 - mmengine - INFO - Saving checkpoint at 15 epochs
2025/05/14 19:27:25 - mmengine - INFO - Epoch(val) [15][18/18]    accuracy/top1: 67.1329  accuracy/top5: 100.0000  data_time: 0.0073  time: 0.0318
2025/05/14 19:27:30 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:27:30 - mmengine - INFO - Epoch(train)  [16][72/72]  lr: 1.0000e-01  eta: 0:08:35  time: 0.0706  data_time: 0.0009  memory: 4306  loss: 1.0582
2025/05/14 19:27:30 - mmengine - INFO - Saving checkpoint at 16 epochs
2025/05/14 19:27:31 - mmengine - INFO - Epoch(val) [16][18/18]    accuracy/top1: 71.8531  accuracy/top5: 100.0000  data_time: 0.0074  time: 0.0332
2025/05/14 19:27:37 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:27:37 - mmengine - INFO - Epoch(train)  [17][72/72]  lr: 1.0000e-01  eta: 0:08:28  time: 0.0718  data_time: 0.0009  memory: 4306  loss: 1.2794
2025/05/14 19:27:37 - mmengine - INFO - Saving checkpoint at 17 epochs
2025/05/14 19:27:39 - mmengine - INFO - Epoch(val) [17][18/18]    accuracy/top1: 66.9580  accuracy/top5: 100.0000  data_time: 0.0074  time: 0.0328
2025/05/14 19:27:44 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:27:44 - mmengine - INFO - Epoch(train)  [18][72/72]  lr: 1.0000e-01  eta: 0:08:21  time: 0.0698  data_time: 0.0010  memory: 4306  loss: 1.0623
2025/05/14 19:27:44 - mmengine - INFO - Saving checkpoint at 18 epochs
2025/05/14 19:27:46 - mmengine - INFO - Epoch(val) [18][18/18]    accuracy/top1: 68.8811  accuracy/top5: 100.0000  data_time: 0.0079  time: 0.0328
2025/05/14 19:27:52 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:27:52 - mmengine - INFO - Epoch(train)  [19][72/72]  lr: 1.0000e-01  eta: 0:08:15  time: 0.0679  data_time: 0.0008  memory: 4306  loss: 1.1392
2025/05/14 19:27:52 - mmengine - INFO - Saving checkpoint at 19 epochs
2025/05/14 19:27:53 - mmengine - INFO - Epoch(val) [19][18/18]    accuracy/top1: 70.8042  accuracy/top5: 100.0000  data_time: 0.0081  time: 0.0300
2025/05/14 19:27:59 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:27:59 - mmengine - INFO - Epoch(train)  [20][72/72]  lr: 1.0000e-01  eta: 0:08:06  time: 0.0598  data_time: 0.0005  memory: 4306  loss: 1.0518
2025/05/14 19:27:59 - mmengine - INFO - Saving checkpoint at 20 epochs
2025/05/14 19:28:00 - mmengine - INFO - Epoch(val) [20][18/18]    accuracy/top1: 70.1049  accuracy/top5: 100.0000  data_time: 0.0080  time: 0.0323
2025/05/14 19:28:05 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:28:05 - mmengine - INFO - Epoch(train)  [21][72/72]  lr: 1.0000e-01  eta: 0:07:57  time: 0.0662  data_time: 0.0008  memory: 4306  loss: 1.0706
2025/05/14 19:28:05 - mmengine - INFO - Saving checkpoint at 21 epochs
2025/05/14 19:28:06 - mmengine - INFO - Epoch(val) [21][18/18]    accuracy/top1: 71.6783  accuracy/top5: 100.0000  data_time: 0.0089  time: 0.0323
2025/05/14 19:28:12 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:28:12 - mmengine - INFO - Epoch(train)  [22][72/72]  lr: 1.0000e-01  eta: 0:07:51  time: 0.0698  data_time: 0.0008  memory: 4306  loss: 1.1102
2025/05/14 19:28:12 - mmengine - INFO - Saving checkpoint at 22 epochs
2025/05/14 19:28:13 - mmengine - INFO - Epoch(val) [22][18/18]    accuracy/top1: 70.2797  accuracy/top5: 100.0000  data_time: 0.0064  time: 0.0323
2025/05/14 19:28:19 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:28:19 - mmengine - INFO - Epoch(train)  [23][72/72]  lr: 1.0000e-01  eta: 0:07:44  time: 0.0667  data_time: 0.0007  memory: 4306  loss: 1.1334
2025/05/14 19:28:19 - mmengine - INFO - Saving checkpoint at 23 epochs
2025/05/14 19:28:21 - mmengine - INFO - Epoch(val) [23][18/18]    accuracy/top1: 69.4056  accuracy/top5: 100.0000  data_time: 0.0099  time: 0.0346
2025/05/14 19:28:27 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:28:27 - mmengine - INFO - Epoch(train)  [24][72/72]  lr: 1.0000e-01  eta: 0:07:38  time: 0.0678  data_time: 0.0010  memory: 4306  loss: 1.1747
2025/05/14 19:28:27 - mmengine - INFO - Saving checkpoint at 24 epochs
2025/05/14 19:28:28 - mmengine - INFO - Epoch(val) [24][18/18]    accuracy/top1: 72.5525  accuracy/top5: 100.0000  data_time: 0.0069  time: 0.0314
2025/05/14 19:28:34 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:28:34 - mmengine - INFO - Epoch(train)  [25][72/72]  lr: 1.0000e-01  eta: 0:07:32  time: 0.0702  data_time: 0.0009  memory: 4306  loss: 1.1169
2025/05/14 19:28:34 - mmengine - INFO - Saving checkpoint at 25 epochs
2025/05/14 19:28:35 - mmengine - INFO - Epoch(val) [25][18/18]    accuracy/top1: 73.0769  accuracy/top5: 100.0000  data_time: 0.0081  time: 0.0332
2025/05/14 19:28:41 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:28:41 - mmengine - INFO - Epoch(train)  [26][72/72]  lr: 1.0000e-01  eta: 0:07:26  time: 0.0681  data_time: 0.0008  memory: 4306  loss: 1.1126
2025/05/14 19:28:41 - mmengine - INFO - Saving checkpoint at 26 epochs
2025/05/14 19:28:42 - mmengine - INFO - Epoch(val) [26][18/18]    accuracy/top1: 73.7762  accuracy/top5: 100.0000  data_time: 0.0070  time: 0.0323
2025/05/14 19:28:48 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:28:48 - mmengine - INFO - Epoch(train)  [27][72/72]  lr: 1.0000e-01  eta: 0:07:20  time: 0.0662  data_time: 0.0006  memory: 4306  loss: 1.0355
2025/05/14 19:28:48 - mmengine - INFO - Saving checkpoint at 27 epochs
2025/05/14 19:28:50 - mmengine - INFO - Epoch(val) [27][18/18]    accuracy/top1: 74.3007  accuracy/top5: 100.0000  data_time: 0.0074  time: 0.0320
2025/05/14 19:28:54 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:28:56 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:28:56 - mmengine - INFO - Epoch(train)  [28][72/72]  lr: 1.0000e-01  eta: 0:07:14  time: 0.0665  data_time: 0.0007  memory: 4306  loss: 1.0621
2025/05/14 19:28:56 - mmengine - INFO - Saving checkpoint at 28 epochs
2025/05/14 19:28:57 - mmengine - INFO - Epoch(val) [28][18/18]    accuracy/top1: 75.1748  accuracy/top5: 100.0000  data_time: 0.0066  time: 0.0319
2025/05/14 19:29:03 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:29:03 - mmengine - INFO - Epoch(train)  [29][72/72]  lr: 1.0000e-01  eta: 0:07:08  time: 0.0649  data_time: 0.0007  memory: 4306  loss: 1.1827
2025/05/14 19:29:03 - mmengine - INFO - Saving checkpoint at 29 epochs
2025/05/14 19:29:04 - mmengine - INFO - Epoch(val) [29][18/18]    accuracy/top1: 71.6783  accuracy/top5: 100.0000  data_time: 0.0076  time: 0.0320
2025/05/14 19:29:10 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:29:10 - mmengine - INFO - Epoch(train)  [30][72/72]  lr: 1.0000e-01  eta: 0:07:02  time: 0.0737  data_time: 0.0010  memory: 4306  loss: 1.0855
2025/05/14 19:29:10 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/14 19:29:11 - mmengine - INFO - Epoch(val) [30][18/18]    accuracy/top1: 73.9510  accuracy/top5: 100.0000  data_time: 0.0073  time: 0.0335
2025/05/14 19:29:17 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:29:17 - mmengine - INFO - Epoch(train)  [31][72/72]  lr: 1.0000e-02  eta: 0:06:56  time: 0.0666  data_time: 0.0007  memory: 4306  loss: 0.9714
2025/05/14 19:29:17 - mmengine - INFO - Saving checkpoint at 31 epochs
2025/05/14 19:29:19 - mmengine - INFO - Epoch(val) [31][18/18]    accuracy/top1: 75.6993  accuracy/top5: 100.0000  data_time: 0.0059  time: 0.0309
2025/05/14 19:29:24 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:29:24 - mmengine - INFO - Epoch(train)  [32][72/72]  lr: 1.0000e-02  eta: 0:06:49  time: 0.0619  data_time: 0.0006  memory: 4306  loss: 0.9947
2025/05/14 19:29:24 - mmengine - INFO - Saving checkpoint at 32 epochs
2025/05/14 19:29:26 - mmengine - INFO - Epoch(val) [32][18/18]    accuracy/top1: 75.0000  accuracy/top5: 100.0000  data_time: 0.0073  time: 0.0336
2025/05/14 19:29:31 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:29:31 - mmengine - INFO - Epoch(train)  [33][72/72]  lr: 1.0000e-02  eta: 0:06:42  time: 0.0670  data_time: 0.0007  memory: 4306  loss: 1.1131
2025/05/14 19:29:31 - mmengine - INFO - Saving checkpoint at 33 epochs
2025/05/14 19:29:32 - mmengine - INFO - Epoch(val) [33][18/18]    accuracy/top1: 76.2238  accuracy/top5: 100.0000  data_time: 0.0064  time: 0.0280
2025/05/14 19:29:37 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:29:37 - mmengine - INFO - Epoch(train)  [34][72/72]  lr: 1.0000e-02  eta: 0:06:35  time: 0.0640  data_time: 0.0006  memory: 4306  loss: 0.9526
2025/05/14 19:29:37 - mmengine - INFO - Saving checkpoint at 34 epochs
2025/05/14 19:29:38 - mmengine - INFO - Epoch(val) [34][18/18]    accuracy/top1: 76.9231  accuracy/top5: 100.0000  data_time: 0.0053  time: 0.0275
2025/05/14 19:29:44 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:29:44 - mmengine - INFO - Epoch(train)  [35][72/72]  lr: 1.0000e-02  eta: 0:06:28  time: 0.0664  data_time: 0.0007  memory: 4306  loss: 0.9160
2025/05/14 19:29:44 - mmengine - INFO - Saving checkpoint at 35 epochs
2025/05/14 19:29:45 - mmengine - INFO - Epoch(val) [35][18/18]    accuracy/top1: 76.2238  accuracy/top5: 100.0000  data_time: 0.0058  time: 0.0281
2025/05/14 19:29:50 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:29:50 - mmengine - INFO - Epoch(train)  [36][72/72]  lr: 1.0000e-02  eta: 0:06:20  time: 0.0655  data_time: 0.0007  memory: 4306  loss: 1.0635
2025/05/14 19:29:50 - mmengine - INFO - Saving checkpoint at 36 epochs
2025/05/14 19:29:52 - mmengine - INFO - Epoch(val) [36][18/18]    accuracy/top1: 76.5734  accuracy/top5: 100.0000  data_time: 0.0069  time: 0.0324
2025/05/14 19:29:58 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:29:58 - mmengine - INFO - Epoch(train)  [37][72/72]  lr: 1.0000e-02  eta: 0:06:15  time: 0.0650  data_time: 0.0006  memory: 4306  loss: 0.8597
2025/05/14 19:29:58 - mmengine - INFO - Saving checkpoint at 37 epochs
2025/05/14 19:29:59 - mmengine - INFO - Epoch(val) [37][18/18]    accuracy/top1: 76.9231  accuracy/top5: 100.0000  data_time: 0.0070  time: 0.0291
2025/05/14 19:30:04 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:30:04 - mmengine - INFO - Epoch(train)  [38][72/72]  lr: 1.0000e-02  eta: 0:06:08  time: 0.0639  data_time: 0.0007  memory: 4306  loss: 1.0173
2025/05/14 19:30:04 - mmengine - INFO - Saving checkpoint at 38 epochs
2025/05/14 19:30:06 - mmengine - INFO - Epoch(val) [38][18/18]    accuracy/top1: 76.0490  accuracy/top5: 100.0000  data_time: 0.0057  time: 0.0280
2025/05/14 19:30:11 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:30:11 - mmengine - INFO - Epoch(train)  [39][72/72]  lr: 1.0000e-02  eta: 0:06:01  time: 0.0656  data_time: 0.0006  memory: 4306  loss: 1.0906
2025/05/14 19:30:11 - mmengine - INFO - Saving checkpoint at 39 epochs
2025/05/14 19:30:12 - mmengine - INFO - Epoch(val) [39][18/18]    accuracy/top1: 77.0979  accuracy/top5: 100.0000  data_time: 0.0054  time: 0.0280
2025/05/14 19:30:18 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:30:18 - mmengine - INFO - Epoch(train)  [40][72/72]  lr: 1.0000e-02  eta: 0:05:55  time: 0.0654  data_time: 0.0006  memory: 4306  loss: 0.9596
2025/05/14 19:30:18 - mmengine - INFO - Saving checkpoint at 40 epochs
2025/05/14 19:30:19 - mmengine - INFO - Epoch(val) [40][18/18]    accuracy/top1: 76.9231  accuracy/top5: 100.0000  data_time: 0.0064  time: 0.0291
2025/05/14 19:30:24 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:30:24 - mmengine - INFO - Epoch(train)  [41][72/72]  lr: 1.0000e-02  eta: 0:05:48  time: 0.0660  data_time: 0.0006  memory: 4306  loss: 0.9265
2025/05/14 19:30:24 - mmengine - INFO - Saving checkpoint at 41 epochs
2025/05/14 19:30:25 - mmengine - INFO - Epoch(val) [41][18/18]    accuracy/top1: 77.7972  accuracy/top5: 100.0000  data_time: 0.0063  time: 0.0280
2025/05/14 19:30:29 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:30:31 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:30:31 - mmengine - INFO - Epoch(train)  [42][72/72]  lr: 1.0000e-02  eta: 0:05:41  time: 0.0647  data_time: 0.0006  memory: 4306  loss: 0.9387
2025/05/14 19:30:31 - mmengine - INFO - Saving checkpoint at 42 epochs
2025/05/14 19:30:32 - mmengine - INFO - Epoch(val) [42][18/18]    accuracy/top1: 77.2727  accuracy/top5: 100.0000  data_time: 0.0062  time: 0.0277
2025/05/14 19:30:37 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:30:37 - mmengine - INFO - Epoch(train)  [43][72/72]  lr: 1.0000e-02  eta: 0:05:35  time: 0.0642  data_time: 0.0006  memory: 4306  loss: 1.0644
2025/05/14 19:30:37 - mmengine - INFO - Saving checkpoint at 43 epochs
2025/05/14 19:30:38 - mmengine - INFO - Epoch(val) [43][18/18]    accuracy/top1: 76.9231  accuracy/top5: 100.0000  data_time: 0.0056  time: 0.0345
2025/05/14 19:30:43 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:30:43 - mmengine - INFO - Epoch(train)  [44][72/72]  lr: 1.0000e-02  eta: 0:05:28  time: 0.0662  data_time: 0.0006  memory: 4306  loss: 1.0673
2025/05/14 19:30:43 - mmengine - INFO - Saving checkpoint at 44 epochs
2025/05/14 19:30:45 - mmengine - INFO - Epoch(val) [44][18/18]    accuracy/top1: 78.3217  accuracy/top5: 100.0000  data_time: 0.0073  time: 0.0295
2025/05/14 19:30:50 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:30:50 - mmengine - INFO - Epoch(train)  [45][72/72]  lr: 1.0000e-02  eta: 0:05:21  time: 0.0639  data_time: 0.0008  memory: 4306  loss: 1.0191
2025/05/14 19:30:50 - mmengine - INFO - Saving checkpoint at 45 epochs
2025/05/14 19:30:51 - mmengine - INFO - Epoch(val) [45][18/18]    accuracy/top1: 77.6224  accuracy/top5: 100.0000  data_time: 0.0068  time: 0.0291
2025/05/14 19:30:56 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:30:56 - mmengine - INFO - Epoch(train)  [46][72/72]  lr: 1.0000e-02  eta: 0:05:15  time: 0.0636  data_time: 0.0005  memory: 4306  loss: 1.0670
2025/05/14 19:30:56 - mmengine - INFO - Saving checkpoint at 46 epochs
2025/05/14 19:30:57 - mmengine - INFO - Epoch(val) [46][18/18]    accuracy/top1: 77.9720  accuracy/top5: 100.0000  data_time: 0.0058  time: 0.0284
2025/05/14 19:31:02 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:31:02 - mmengine - INFO - Epoch(train)  [47][72/72]  lr: 1.0000e-02  eta: 0:05:08  time: 0.0651  data_time: 0.0006  memory: 4306  loss: 1.0698
2025/05/14 19:31:02 - mmengine - INFO - Saving checkpoint at 47 epochs
2025/05/14 19:31:03 - mmengine - INFO - Epoch(val) [47][18/18]    accuracy/top1: 77.6224  accuracy/top5: 100.0000  data_time: 0.0056  time: 0.0283
2025/05/14 19:31:08 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:31:08 - mmengine - INFO - Epoch(train)  [48][72/72]  lr: 1.0000e-02  eta: 0:05:01  time: 0.0642  data_time: 0.0006  memory: 4306  loss: 0.9810
2025/05/14 19:31:08 - mmengine - INFO - Saving checkpoint at 48 epochs
2025/05/14 19:31:10 - mmengine - INFO - Epoch(val) [48][18/18]    accuracy/top1: 77.2727  accuracy/top5: 100.0000  data_time: 0.0064  time: 0.0290
2025/05/14 19:31:15 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:31:15 - mmengine - INFO - Epoch(train)  [49][72/72]  lr: 1.0000e-02  eta: 0:04:55  time: 0.0673  data_time: 0.0007  memory: 4306  loss: 0.9586
2025/05/14 19:31:15 - mmengine - INFO - Saving checkpoint at 49 epochs
2025/05/14 19:31:16 - mmengine - INFO - Epoch(val) [49][18/18]    accuracy/top1: 77.9720  accuracy/top5: 100.0000  data_time: 0.0049  time: 0.0279
2025/05/14 19:31:21 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:31:21 - mmengine - INFO - Epoch(train)  [50][72/72]  lr: 1.0000e-02  eta: 0:04:49  time: 0.0650  data_time: 0.0006  memory: 4306  loss: 0.9328
2025/05/14 19:31:21 - mmengine - INFO - Saving checkpoint at 50 epochs
2025/05/14 19:31:22 - mmengine - INFO - Epoch(val) [50][18/18]    accuracy/top1: 78.3217  accuracy/top5: 100.0000  data_time: 0.0046  time: 0.0262
2025/05/14 19:31:28 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:31:28 - mmengine - INFO - Epoch(train)  [51][72/72]  lr: 1.0000e-02  eta: 0:04:43  time: 0.0652  data_time: 0.0006  memory: 4306  loss: 0.9633
2025/05/14 19:31:28 - mmengine - INFO - Saving checkpoint at 51 epochs
2025/05/14 19:31:29 - mmengine - INFO - Epoch(val) [51][18/18]    accuracy/top1: 79.0210  accuracy/top5: 100.0000  data_time: 0.0059  time: 0.0283
2025/05/14 19:31:34 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:31:34 - mmengine - INFO - Epoch(train)  [52][72/72]  lr: 1.0000e-02  eta: 0:04:37  time: 0.0644  data_time: 0.0006  memory: 4306  loss: 0.9084
2025/05/14 19:31:34 - mmengine - INFO - Saving checkpoint at 52 epochs
2025/05/14 19:31:35 - mmengine - INFO - Epoch(val) [52][18/18]    accuracy/top1: 79.5455  accuracy/top5: 100.0000  data_time: 0.0052  time: 0.0273
2025/05/14 19:31:41 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:31:41 - mmengine - INFO - Epoch(train)  [53][72/72]  lr: 1.0000e-02  eta: 0:04:30  time: 0.0642  data_time: 0.0006  memory: 4306  loss: 0.9310
2025/05/14 19:31:41 - mmengine - INFO - Saving checkpoint at 53 epochs
2025/05/14 19:31:42 - mmengine - INFO - Epoch(val) [53][18/18]    accuracy/top1: 80.2448  accuracy/top5: 100.0000  data_time: 0.0057  time: 0.0277
2025/05/14 19:31:47 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:31:47 - mmengine - INFO - Epoch(train)  [54][72/72]  lr: 1.0000e-02  eta: 0:04:24  time: 0.0643  data_time: 0.0005  memory: 4306  loss: 0.9051
2025/05/14 19:31:47 - mmengine - INFO - Saving checkpoint at 54 epochs
2025/05/14 19:31:48 - mmengine - INFO - Epoch(val) [54][18/18]    accuracy/top1: 78.1469  accuracy/top5: 100.0000  data_time: 0.0059  time: 0.0288
2025/05/14 19:31:54 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:31:54 - mmengine - INFO - Epoch(train)  [55][72/72]  lr: 1.0000e-02  eta: 0:04:18  time: 0.0661  data_time: 0.0007  memory: 4306  loss: 0.9065
2025/05/14 19:31:54 - mmengine - INFO - Saving checkpoint at 55 epochs
2025/05/14 19:31:55 - mmengine - INFO - Epoch(val) [55][18/18]    accuracy/top1: 79.3706  accuracy/top5: 100.0000  data_time: 0.0061  time: 0.0273
2025/05/14 19:31:58 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:32:00 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:32:00 - mmengine - INFO - Epoch(train)  [56][72/72]  lr: 1.0000e-02  eta: 0:04:12  time: 0.0646  data_time: 0.0006  memory: 4306  loss: 0.9090
2025/05/14 19:32:00 - mmengine - INFO - Saving checkpoint at 56 epochs
2025/05/14 19:32:01 - mmengine - INFO - Epoch(val) [56][18/18]    accuracy/top1: 79.0210  accuracy/top5: 100.0000  data_time: 0.0059  time: 0.0292
2025/05/14 19:32:07 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:32:07 - mmengine - INFO - Epoch(train)  [57][72/72]  lr: 1.0000e-02  eta: 0:04:06  time: 0.0645  data_time: 0.0007  memory: 4306  loss: 0.9924
2025/05/14 19:32:07 - mmengine - INFO - Saving checkpoint at 57 epochs
2025/05/14 19:32:08 - mmengine - INFO - Epoch(val) [57][18/18]    accuracy/top1: 78.8462  accuracy/top5: 100.0000  data_time: 0.0056  time: 0.0274
2025/05/14 19:32:13 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:32:13 - mmengine - INFO - Epoch(train)  [58][72/72]  lr: 1.0000e-02  eta: 0:04:00  time: 0.0633  data_time: 0.0006  memory: 4306  loss: 0.9052
2025/05/14 19:32:13 - mmengine - INFO - Saving checkpoint at 58 epochs
2025/05/14 19:32:14 - mmengine - INFO - Epoch(val) [58][18/18]    accuracy/top1: 81.8182  accuracy/top5: 100.0000  data_time: 0.0055  time: 0.0263
2025/05/14 19:32:19 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:32:19 - mmengine - INFO - Epoch(train)  [59][72/72]  lr: 1.0000e-02  eta: 0:03:54  time: 0.0644  data_time: 0.0006  memory: 4306  loss: 0.9815
2025/05/14 19:32:19 - mmengine - INFO - Saving checkpoint at 59 epochs
2025/05/14 19:32:21 - mmengine - INFO - Epoch(val) [59][18/18]    accuracy/top1: 80.5944  accuracy/top5: 100.0000  data_time: 0.0048  time: 0.0286
2025/05/14 19:32:26 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:32:26 - mmengine - INFO - Epoch(train)  [60][72/72]  lr: 1.0000e-02  eta: 0:03:48  time: 0.0654  data_time: 0.0006  memory: 4306  loss: 0.9336
2025/05/14 19:32:26 - mmengine - INFO - Saving checkpoint at 60 epochs
2025/05/14 19:32:27 - mmengine - INFO - Epoch(val) [60][18/18]    accuracy/top1: 79.8951  accuracy/top5: 100.0000  data_time: 0.0054  time: 0.0277
2025/05/14 19:32:32 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:32:32 - mmengine - INFO - Epoch(train)  [61][72/72]  lr: 1.0000e-03  eta: 0:03:42  time: 0.0632  data_time: 0.0006  memory: 4306  loss: 0.8748
2025/05/14 19:32:32 - mmengine - INFO - Saving checkpoint at 61 epochs
2025/05/14 19:32:33 - mmengine - INFO - Epoch(val) [61][18/18]    accuracy/top1: 81.4685  accuracy/top5: 100.0000  data_time: 0.0065  time: 0.0282
2025/05/14 19:32:39 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:32:39 - mmengine - INFO - Epoch(train)  [62][72/72]  lr: 1.0000e-03  eta: 0:03:36  time: 0.0650  data_time: 0.0008  memory: 4306  loss: 0.8876
2025/05/14 19:32:39 - mmengine - INFO - Saving checkpoint at 62 epochs
2025/05/14 19:32:40 - mmengine - INFO - Epoch(val) [62][18/18]    accuracy/top1: 80.5944  accuracy/top5: 100.0000  data_time: 0.0047  time: 0.0278
2025/05/14 19:32:45 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:32:45 - mmengine - INFO - Epoch(train)  [63][72/72]  lr: 1.0000e-03  eta: 0:03:30  time: 0.0664  data_time: 0.0009  memory: 4306  loss: 0.7918
2025/05/14 19:32:45 - mmengine - INFO - Saving checkpoint at 63 epochs
2025/05/14 19:32:46 - mmengine - INFO - Epoch(val) [63][18/18]    accuracy/top1: 80.4196  accuracy/top5: 100.0000  data_time: 0.0054  time: 0.0287
2025/05/14 19:32:52 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:32:52 - mmengine - INFO - Epoch(train)  [64][72/72]  lr: 1.0000e-03  eta: 0:03:24  time: 0.0667  data_time: 0.0008  memory: 4306  loss: 0.9008
2025/05/14 19:32:52 - mmengine - INFO - Saving checkpoint at 64 epochs
2025/05/14 19:32:53 - mmengine - INFO - Epoch(val) [64][18/18]    accuracy/top1: 81.1189  accuracy/top5: 100.0000  data_time: 0.0054  time: 0.0278
2025/05/14 19:32:58 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:32:58 - mmengine - INFO - Epoch(train)  [65][72/72]  lr: 1.0000e-03  eta: 0:03:19  time: 0.0667  data_time: 0.0008  memory: 4306  loss: 0.7348
2025/05/14 19:32:58 - mmengine - INFO - Saving checkpoint at 65 epochs
2025/05/14 19:32:59 - mmengine - INFO - Epoch(val) [65][18/18]    accuracy/top1: 81.1189  accuracy/top5: 100.0000  data_time: 0.0065  time: 0.0292
2025/05/14 19:33:05 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:33:05 - mmengine - INFO - Epoch(train)  [66][72/72]  lr: 1.0000e-03  eta: 0:03:13  time: 0.0678  data_time: 0.0009  memory: 4306  loss: 0.9184
2025/05/14 19:33:05 - mmengine - INFO - Saving checkpoint at 66 epochs
2025/05/14 19:33:06 - mmengine - INFO - Epoch(val) [66][18/18]    accuracy/top1: 80.4196  accuracy/top5: 100.0000  data_time: 0.0063  time: 0.0284
2025/05/14 19:33:11 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:33:11 - mmengine - INFO - Epoch(train)  [67][72/72]  lr: 1.0000e-03  eta: 0:03:07  time: 0.0653  data_time: 0.0008  memory: 4306  loss: 0.8822
2025/05/14 19:33:11 - mmengine - INFO - Saving checkpoint at 67 epochs
2025/05/14 19:33:13 - mmengine - INFO - Epoch(val) [67][18/18]    accuracy/top1: 80.5944  accuracy/top5: 100.0000  data_time: 0.0061  time: 0.0283
2025/05/14 19:33:18 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:33:18 - mmengine - INFO - Epoch(train)  [68][72/72]  lr: 1.0000e-03  eta: 0:03:01  time: 0.0662  data_time: 0.0008  memory: 4306  loss: 0.9513
2025/05/14 19:33:18 - mmengine - INFO - Saving checkpoint at 68 epochs
2025/05/14 19:33:19 - mmengine - INFO - Epoch(val) [68][18/18]    accuracy/top1: 80.4196  accuracy/top5: 100.0000  data_time: 0.0057  time: 0.0284
2025/05/14 19:33:25 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:33:25 - mmengine - INFO - Epoch(train)  [69][72/72]  lr: 1.0000e-03  eta: 0:02:56  time: 0.0776  data_time: 0.0024  memory: 4306  loss: 0.8049
2025/05/14 19:33:25 - mmengine - INFO - Saving checkpoint at 69 epochs
2025/05/14 19:33:27 - mmengine - INFO - Epoch(val) [69][18/18]    accuracy/top1: 80.9441  accuracy/top5: 100.0000  data_time: 0.0086  time: 0.0388
2025/05/14 19:33:30 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:33:34 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:33:34 - mmengine - INFO - Epoch(train)  [70][72/72]  lr: 1.0000e-03  eta: 0:02:51  time: 0.0778  data_time: 0.0019  memory: 4306  loss: 0.8963
2025/05/14 19:33:34 - mmengine - INFO - Saving checkpoint at 70 epochs
2025/05/14 19:33:35 - mmengine - INFO - Epoch(val) [70][18/18]    accuracy/top1: 80.2448  accuracy/top5: 100.0000  data_time: 0.0085  time: 0.0362
2025/05/14 19:33:42 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:33:42 - mmengine - INFO - Epoch(train)  [71][72/72]  lr: 1.0000e-03  eta: 0:02:45  time: 0.0782  data_time: 0.0013  memory: 4306  loss: 0.9340
2025/05/14 19:33:42 - mmengine - INFO - Saving checkpoint at 71 epochs
2025/05/14 19:33:44 - mmengine - INFO - Epoch(val) [71][18/18]    accuracy/top1: 79.5455  accuracy/top5: 100.0000  data_time: 0.0087  time: 0.0370
2025/05/14 19:33:50 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:33:50 - mmengine - INFO - Epoch(train)  [72][72/72]  lr: 1.0000e-03  eta: 0:02:40  time: 0.0780  data_time: 0.0013  memory: 4306  loss: 0.9293
2025/05/14 19:33:50 - mmengine - INFO - Saving checkpoint at 72 epochs
2025/05/14 19:33:52 - mmengine - INFO - Epoch(val) [72][18/18]    accuracy/top1: 79.1958  accuracy/top5: 100.0000  data_time: 0.0066  time: 0.0370
2025/05/14 19:33:59 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:33:59 - mmengine - INFO - Epoch(train)  [73][72/72]  lr: 1.0000e-03  eta: 0:02:35  time: 0.0816  data_time: 0.0013  memory: 4306  loss: 0.8250
2025/05/14 19:33:59 - mmengine - INFO - Saving checkpoint at 73 epochs
2025/05/14 19:34:00 - mmengine - INFO - Epoch(val) [73][18/18]    accuracy/top1: 82.6923  accuracy/top5: 100.0000  data_time: 0.0082  time: 0.0358
2025/05/14 19:34:07 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:34:07 - mmengine - INFO - Epoch(train)  [74][72/72]  lr: 1.0000e-03  eta: 0:02:29  time: 0.0774  data_time: 0.0016  memory: 4306  loss: 0.7886
2025/05/14 19:34:07 - mmengine - INFO - Saving checkpoint at 74 epochs
2025/05/14 19:34:08 - mmengine - INFO - Epoch(val) [74][18/18]    accuracy/top1: 82.1678  accuracy/top5: 100.0000  data_time: 0.0079  time: 0.0384
2025/05/14 19:34:15 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:34:15 - mmengine - INFO - Epoch(train)  [75][72/72]  lr: 1.0000e-03  eta: 0:02:24  time: 0.0786  data_time: 0.0013  memory: 4306  loss: 0.9674
2025/05/14 19:34:15 - mmengine - INFO - Saving checkpoint at 75 epochs
2025/05/14 19:34:17 - mmengine - INFO - Epoch(val) [75][18/18]    accuracy/top1: 79.3706  accuracy/top5: 100.0000  data_time: 0.0109  time: 0.0364
2025/05/14 19:34:24 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:34:24 - mmengine - INFO - Epoch(train)  [76][72/72]  lr: 1.0000e-03  eta: 0:02:19  time: 0.0805  data_time: 0.0013  memory: 4306  loss: 1.0900
2025/05/14 19:34:24 - mmengine - INFO - Saving checkpoint at 76 epochs
2025/05/14 19:34:25 - mmengine - INFO - Epoch(val) [76][18/18]    accuracy/top1: 79.0210  accuracy/top5: 100.0000  data_time: 0.0084  time: 0.0365
2025/05/14 19:34:32 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:34:32 - mmengine - INFO - Epoch(train)  [77][72/72]  lr: 1.0000e-03  eta: 0:02:13  time: 0.0795  data_time: 0.0021  memory: 4306  loss: 0.7821
2025/05/14 19:34:32 - mmengine - INFO - Saving checkpoint at 77 epochs
2025/05/14 19:34:34 - mmengine - INFO - Epoch(val) [77][18/18]    accuracy/top1: 82.1678  accuracy/top5: 100.0000  data_time: 0.0061  time: 0.0370
2025/05/14 19:34:41 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:34:41 - mmengine - INFO - Epoch(train)  [78][72/72]  lr: 1.0000e-03  eta: 0:02:08  time: 0.0734  data_time: 0.0011  memory: 4306  loss: 1.0121
2025/05/14 19:34:41 - mmengine - INFO - Saving checkpoint at 78 epochs
2025/05/14 19:34:42 - mmengine - INFO - Epoch(val) [78][18/18]    accuracy/top1: 79.7203  accuracy/top5: 100.0000  data_time: 0.0059  time: 0.0362
2025/05/14 19:34:49 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:34:49 - mmengine - INFO - Epoch(train)  [79][72/72]  lr: 1.0000e-03  eta: 0:02:02  time: 0.0832  data_time: 0.0012  memory: 4306  loss: 0.8340
2025/05/14 19:34:49 - mmengine - INFO - Saving checkpoint at 79 epochs
2025/05/14 19:34:51 - mmengine - INFO - Epoch(val) [79][18/18]    accuracy/top1: 81.4685  accuracy/top5: 100.0000  data_time: 0.0043  time: 0.0360
2025/05/14 19:34:58 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:34:58 - mmengine - INFO - Epoch(train)  [80][72/72]  lr: 1.0000e-03  eta: 0:01:57  time: 0.0786  data_time: 0.0023  memory: 4306  loss: 0.7650
2025/05/14 19:34:58 - mmengine - INFO - Saving checkpoint at 80 epochs
2025/05/14 19:34:59 - mmengine - INFO - Epoch(val) [80][18/18]    accuracy/top1: 82.3427  accuracy/top5: 100.0000  data_time: 0.0090  time: 0.0369
2025/05/14 19:35:06 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:35:06 - mmengine - INFO - Epoch(train)  [81][72/72]  lr: 1.0000e-03  eta: 0:01:51  time: 0.0751  data_time: 0.0011  memory: 4306  loss: 0.7988
2025/05/14 19:35:06 - mmengine - INFO - Saving checkpoint at 81 epochs
2025/05/14 19:35:07 - mmengine - INFO - Epoch(val) [81][18/18]    accuracy/top1: 82.3427  accuracy/top5: 100.0000  data_time: 0.0059  time: 0.0372
2025/05/14 19:35:14 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:35:14 - mmengine - INFO - Epoch(train)  [82][72/72]  lr: 1.0000e-03  eta: 0:01:46  time: 0.0790  data_time: 0.0012  memory: 4306  loss: 1.0073
2025/05/14 19:35:14 - mmengine - INFO - Saving checkpoint at 82 epochs
2025/05/14 19:35:16 - mmengine - INFO - Epoch(val) [82][18/18]    accuracy/top1: 81.2937  accuracy/top5: 100.0000  data_time: 0.0074  time: 0.0368
2025/05/14 19:35:23 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:35:23 - mmengine - INFO - Epoch(train)  [83][72/72]  lr: 1.0000e-03  eta: 0:01:40  time: 0.0771  data_time: 0.0012  memory: 4306  loss: 0.9001
2025/05/14 19:35:23 - mmengine - INFO - Saving checkpoint at 83 epochs
2025/05/14 19:35:24 - mmengine - INFO - Epoch(val) [83][18/18]    accuracy/top1: 80.9441  accuracy/top5: 100.0000  data_time: 0.0081  time: 0.0375
2025/05/14 19:35:27 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:35:30 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:35:30 - mmengine - INFO - Epoch(train)  [84][72/72]  lr: 1.0000e-03  eta: 0:01:34  time: 0.0757  data_time: 0.0017  memory: 4306  loss: 0.9024
2025/05/14 19:35:30 - mmengine - INFO - Saving checkpoint at 84 epochs
2025/05/14 19:35:32 - mmengine - INFO - Epoch(val) [84][18/18]    accuracy/top1: 81.8182  accuracy/top5: 100.0000  data_time: 0.0063  time: 0.0390
2025/05/14 19:35:39 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:35:39 - mmengine - INFO - Epoch(train)  [85][72/72]  lr: 1.0000e-03  eta: 0:01:28  time: 0.0796  data_time: 0.0012  memory: 4306  loss: 0.8236
2025/05/14 19:35:39 - mmengine - INFO - Saving checkpoint at 85 epochs
2025/05/14 19:35:40 - mmengine - INFO - Epoch(val) [85][18/18]    accuracy/top1: 83.0420  accuracy/top5: 100.0000  data_time: 0.0057  time: 0.0362
2025/05/14 19:35:47 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:35:47 - mmengine - INFO - Epoch(train)  [86][72/72]  lr: 1.0000e-03  eta: 0:01:23  time: 0.0794  data_time: 0.0013  memory: 4306  loss: 0.8663
2025/05/14 19:35:47 - mmengine - INFO - Saving checkpoint at 86 epochs
2025/05/14 19:35:49 - mmengine - INFO - Epoch(val) [86][18/18]    accuracy/top1: 82.3427  accuracy/top5: 100.0000  data_time: 0.0097  time: 0.0364
2025/05/14 19:35:55 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:35:55 - mmengine - INFO - Epoch(train)  [87][72/72]  lr: 1.0000e-03  eta: 0:01:17  time: 0.0787  data_time: 0.0012  memory: 4306  loss: 0.7979
2025/05/14 19:35:55 - mmengine - INFO - Saving checkpoint at 87 epochs
2025/05/14 19:35:56 - mmengine - INFO - Epoch(val) [87][18/18]    accuracy/top1: 83.3916  accuracy/top5: 100.0000  data_time: 0.0037  time: 0.0356
2025/05/14 19:36:03 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:36:03 - mmengine - INFO - Epoch(train)  [88][72/72]  lr: 1.0000e-03  eta: 0:01:11  time: 0.0830  data_time: 0.0013  memory: 4306  loss: 0.9437
2025/05/14 19:36:03 - mmengine - INFO - Saving checkpoint at 88 epochs
2025/05/14 19:36:05 - mmengine - INFO - Epoch(val) [88][18/18]    accuracy/top1: 82.3427  accuracy/top5: 100.0000  data_time: 0.0063  time: 0.0357
2025/05/14 19:36:11 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:36:11 - mmengine - INFO - Epoch(train)  [89][72/72]  lr: 1.0000e-03  eta: 0:01:05  time: 0.0816  data_time: 0.0025  memory: 4306  loss: 0.8226
2025/05/14 19:36:11 - mmengine - INFO - Saving checkpoint at 89 epochs
2025/05/14 19:36:13 - mmengine - INFO - Epoch(val) [89][18/18]    accuracy/top1: 82.3427  accuracy/top5: 100.0000  data_time: 0.0054  time: 0.0371
2025/05/14 19:36:20 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:36:20 - mmengine - INFO - Epoch(train)  [90][72/72]  lr: 1.0000e-03  eta: 0:00:59  time: 0.0785  data_time: 0.0018  memory: 4306  loss: 0.9209
2025/05/14 19:36:20 - mmengine - INFO - Saving checkpoint at 90 epochs
2025/05/14 19:36:21 - mmengine - INFO - Epoch(val) [90][18/18]    accuracy/top1: 81.2937  accuracy/top5: 100.0000  data_time: 0.0063  time: 0.0362
2025/05/14 19:36:28 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:36:28 - mmengine - INFO - Epoch(train)  [91][72/72]  lr: 1.0000e-04  eta: 0:00:53  time: 0.0776  data_time: 0.0012  memory: 4306  loss: 0.9146
2025/05/14 19:36:28 - mmengine - INFO - Saving checkpoint at 91 epochs
2025/05/14 19:36:30 - mmengine - INFO - Epoch(val) [91][18/18]    accuracy/top1: 82.1678  accuracy/top5: 100.0000  data_time: 0.0067  time: 0.0371
2025/05/14 19:36:37 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:36:37 - mmengine - INFO - Epoch(train)  [92][72/72]  lr: 1.0000e-04  eta: 0:00:47  time: 0.0770  data_time: 0.0012  memory: 4306  loss: 0.8254
2025/05/14 19:36:37 - mmengine - INFO - Saving checkpoint at 92 epochs
2025/05/14 19:36:38 - mmengine - INFO - Epoch(val) [92][18/18]    accuracy/top1: 81.9930  accuracy/top5: 100.0000  data_time: 0.0058  time: 0.0346
2025/05/14 19:36:45 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:36:45 - mmengine - INFO - Epoch(train)  [93][72/72]  lr: 1.0000e-04  eta: 0:00:42  time: 0.0804  data_time: 0.0023  memory: 4306  loss: 0.7846
2025/05/14 19:36:45 - mmengine - INFO - Saving checkpoint at 93 epochs
2025/05/14 19:36:46 - mmengine - INFO - Epoch(val) [93][18/18]    accuracy/top1: 83.2168  accuracy/top5: 100.0000  data_time: 0.0091  time: 0.0374
2025/05/14 19:36:53 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:36:53 - mmengine - INFO - Epoch(train)  [94][72/72]  lr: 1.0000e-04  eta: 0:00:36  time: 0.0763  data_time: 0.0014  memory: 4306  loss: 1.0350
2025/05/14 19:36:53 - mmengine - INFO - Saving checkpoint at 94 epochs
2025/05/14 19:36:55 - mmengine - INFO - Epoch(val) [94][18/18]    accuracy/top1: 79.8951  accuracy/top5: 100.0000  data_time: 0.0065  time: 0.0396
2025/05/14 19:37:02 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:37:02 - mmengine - INFO - Epoch(train)  [95][72/72]  lr: 1.0000e-04  eta: 0:00:30  time: 0.0792  data_time: 0.0013  memory: 4306  loss: 0.9112
2025/05/14 19:37:02 - mmengine - INFO - Saving checkpoint at 95 epochs
2025/05/14 19:37:03 - mmengine - INFO - Epoch(val) [95][18/18]    accuracy/top1: 81.6434  accuracy/top5: 100.0000  data_time: 0.0078  time: 0.0351
2025/05/14 19:37:09 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:37:09 - mmengine - INFO - Epoch(train)  [96][72/72]  lr: 1.0000e-04  eta: 0:00:24  time: 0.0672  data_time: 0.0006  memory: 4306  loss: 0.8937
2025/05/14 19:37:09 - mmengine - INFO - Saving checkpoint at 96 epochs
2025/05/14 19:37:11 - mmengine - INFO - Epoch(val) [96][18/18]    accuracy/top1: 82.6923  accuracy/top5: 100.0000  data_time: 0.0052  time: 0.0273
2025/05/14 19:37:16 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:37:16 - mmengine - INFO - Epoch(train)  [97][72/72]  lr: 1.0000e-04  eta: 0:00:18  time: 0.0661  data_time: 0.0006  memory: 4306  loss: 0.9236
2025/05/14 19:37:16 - mmengine - INFO - Saving checkpoint at 97 epochs
2025/05/14 19:37:17 - mmengine - INFO - Epoch(val) [97][18/18]    accuracy/top1: 82.5175  accuracy/top5: 100.0000  data_time: 0.0063  time: 0.0287
2025/05/14 19:37:18 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:37:22 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:37:22 - mmengine - INFO - Epoch(train)  [98][72/72]  lr: 1.0000e-04  eta: 0:00:12  time: 0.0660  data_time: 0.0006  memory: 4306  loss: 0.9181
2025/05/14 19:37:22 - mmengine - INFO - Saving checkpoint at 98 epochs
2025/05/14 19:37:23 - mmengine - INFO - Epoch(val) [98][18/18]    accuracy/top1: 82.1678  accuracy/top5: 100.0000  data_time: 0.0051  time: 0.0268
2025/05/14 19:37:29 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:37:29 - mmengine - INFO - Epoch(train)  [99][72/72]  lr: 1.0000e-04  eta: 0:00:06  time: 0.0657  data_time: 0.0006  memory: 4306  loss: 0.8017
2025/05/14 19:37:29 - mmengine - INFO - Saving checkpoint at 99 epochs
2025/05/14 19:37:30 - mmengine - INFO - Epoch(val) [99][18/18]    accuracy/top1: 83.0420  accuracy/top5: 100.0000  data_time: 0.0049  time: 0.0265
2025/05/14 19:37:35 - mmengine - INFO - Exp name: myresnet50_20250514_192530
2025/05/14 19:37:35 - mmengine - INFO - Epoch(train) [100][72/72]  lr: 1.0000e-04  eta: 0:00:00  time: 0.0656  data_time: 0.0006  memory: 4306  loss: 1.0656
2025/05/14 19:37:35 - mmengine - INFO - Saving checkpoint at 100 epochs
2025/05/14 19:37:37 - mmengine - INFO - Epoch(val) [100][18/18]    accuracy/top1: 79.1958  accuracy/top5: 100.0000  data_time: 0.0054  time: 0.0273
